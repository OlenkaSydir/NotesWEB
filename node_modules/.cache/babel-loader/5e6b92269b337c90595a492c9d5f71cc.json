{"ast":null,"code":"var _jsxFileName = \"/Users/osydir/Documents/LPNU/WEB/notes/src/components/Sign/SignUp.js\";\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport Input from \"../../utils/UI/Input/Input\";\nimport Validation from \"../../utils/Validation/Validation\";\nimport { CONFIG } from \"../../config\";\nimport axios from \"axios\";\n\nclass SingIn extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formControls: {\n        name: {\n          type: 'text',\n          placeholder: 'Name',\n          value: '',\n          valid: false,\n          errorMessage: 'Enter valid name',\n          iconClassName: 'fas fa-user',\n          showValidate: false,\n          validation: {\n            required: true,\n            minLength: 3,\n            maxLength: 60\n          }\n        },\n        email: {\n          type: 'email',\n          placeholder: 'Email',\n          value: '',\n          valid: false,\n          errorMessage: 'Enter valid email',\n          iconClassName: 'fas fa-envelope',\n          showValidate: false,\n          validation: {\n            required: true,\n            email: true\n          }\n        },\n        password: {\n          type: 'password',\n          placeholder: 'Password',\n          value: '',\n          valid: false,\n          errorMessage: 'Enter valid password',\n          iconClassName: 'fas fa-lock',\n          showValidate: false,\n          validation: {\n            required: true,\n            minLength: 8,\n            maxLength: 30,\n            minCountLetters: 1,\n            minCountUpperCase: 1,\n            minCountLowerCase: 1,\n            minCountDigits: 1,\n            passwordSymbols: true\n          }\n        },\n        repassword: {\n          type: 'password',\n          placeholder: 'Re-password',\n          value: '',\n          valid: false,\n          errorMessage: 'Enter valid repassword',\n          iconClassName: 'fas fa-lock',\n          showValidate: false,\n          validation: {\n            required: true,\n            equalTo: 'password'\n          }\n        }\n      }\n    };\n\n    this.onBlur = controlName => {\n      const formControls = { ...this.state.formControls\n      };\n      const control = { ...formControls[controlName]\n      };\n      control.showValidate = true;\n      formControls[controlName] = control;\n      this.setState({\n        formControls\n      });\n    };\n\n    this.onChangeHandler = (event, controlName) => {\n      const formControls = { ...this.state.formControls\n      };\n      const control = { ...formControls[controlName]\n      };\n      control.value = event.target.value;\n      let validateControlInfo = this.validateControl(control.value, control.validation);\n      control.valid = validateControlInfo.isValid;\n\n      if (validateControlInfo.errorMessage !== '') {\n        control.errorMessage = validateControlInfo.errorMessage;\n      }\n\n      formControls[controlName] = control;\n      this.setState({\n        formControls\n      });\n    };\n\n    this.validateControl = (value, validation) => {\n      if (!validation) {\n        return {\n          isValid: true,\n          errorMessage: ''\n        };\n      }\n\n      let validator = new Validation();\n      let isValid = true;\n      let errorMessage = '';\n\n      if (validation.required && isValid) {\n        isValid = !validator.isEmpty(value);\n        if (!isValid) errorMessage = 'Field is required.';\n      }\n\n      if (validation.email && isValid) {\n        isValid = validator.checkEmail(value);\n        if (!isValid) errorMessage = 'Invalid email.';\n      }\n\n      if (validation.minLength && isValid) {\n        isValid = validator.checkMinLength(value, validation.minLength);\n        if (!isValid) errorMessage = 'You should put minimum ' + validation.minLength + ' chars.';\n      }\n\n      if (validation.maxLength && isValid) {\n        isValid = validator.checkMaxLength(value, validation.maxLength);\n        if (!isValid) errorMessage = 'You can put maximum ' + validation.maxLength + ' chars.';\n      }\n\n      if (validation.equalTo && isValid) {\n        isValid = value === this.state.formControls[validation.equalTo].value;\n        if (!isValid) errorMessage = 'Passwords should be equal.';\n      }\n\n      if (validation.minCountLetters && isValid) {\n        isValid = validator.checkPasswordSymbols(value);\n        if (!isValid) errorMessage = 'You can use only latin letters, numbers and symbols(!,#,$,%,&,*,+,?,@,^)';\n      }\n\n      if (validation.minCountUpperCase && isValid) {\n        isValid = validator.checkMinCountUpperCase(value, validation.minCountUpperCase);\n        if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountUpperCase + ' letter(s) in upper case.';\n      }\n\n      if (validation.minCountLowerCase && isValid) {\n        isValid = validator.checkMinCountLowerCase(value, validation.minCountLowerCase);\n        if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountLowerCase + ' letter(s) in lower case.';\n      }\n\n      if (validation.minCountDigits && isValid) {\n        isValid = validator.checkMinCountDigits(value, validation.minCountDigits);\n        if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountDigits + ' digit(s).';\n      }\n\n      if (validation.onlyLatin && isValid) {\n        isValid = value === this.state.formControls[validation.equalTo].value;\n        if (!isValid) errorMessage = 'Passwords should be equal.';\n      }\n\n      return {\n        isValid: isValid,\n        errorMessage: errorMessage\n      };\n    };\n\n    this.renderInputs = () => {\n      const inputs = Object.keys(this.state.formControls).map((controlName, index) => {\n        const control = this.state.formControls[controlName];\n        return /*#__PURE__*/React.createElement(Input, {\n          key: controlName + index,\n          type: control.type,\n          placeholder: control.placeholder,\n          valid: control.valid,\n          iconClassName: control.iconClassName,\n          showValidate: control.showValidate,\n          onChange: e => this.onChangeHandler(e, controlName),\n          errorMessage: control.errorMessage,\n          onBlur: () => this.onBlur(controlName),\n          value: control.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }\n        });\n      });\n      return inputs;\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      let isValid = true;\n      const formControls = { ...this.state.formControls\n      };\n      Object.keys(formControls).forEach(controlName => {\n        let control = { ...formControls[controlName]\n        };\n        control.showValidate = true;\n        formControls[controlName] = control;\n\n        if (!control.valid && isValid) {\n          isValid = false;\n        }\n      });\n\n      if (isValid) {\n        axios.post(CONFIG.apiServer + \"api/register\", {\n          name: formControls.name.value,\n          email: formControls.email.value,\n          password: formControls.password.value\n        }, {\n          headers: {\n            'Accept': 'application/json'\n          }\n        }).then(res => {\n          window.location.href = \"/signin\";\n        }).catch(error => {\n          if (error.response.data.data.email === \"Email already exists.\") {\n            let control = formControls.email;\n            control.valid = false;\n            control.showValidate = true;\n            control.errorMessage = 'User with the same email already exists.';\n            formControls.email = control;\n            this.setState({\n              formControls\n            });\n          } else {\n            alert(\"Unknown error\");\n          }\n        });\n      } else {\n        this.setState({\n          formControls\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }\n    }, \"Sign Up\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }, this.renderInputs(), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sign-button-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn default-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 25\n      }\n    }, \"Create\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"other-type-sign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 25\n      }\n    }, \"Have account already?\"), /*#__PURE__*/React.createElement(Link, {\n      to: '/signin',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 25\n      }\n    }, \"Sign In\"))));\n  }\n\n}\n\nexport default SingIn;","map":{"version":3,"sources":["/Users/osydir/Documents/LPNU/WEB/notes/src/components/Sign/SignUp.js"],"names":["React","Link","Input","Validation","CONFIG","axios","SingIn","Component","state","formControls","name","type","placeholder","value","valid","errorMessage","iconClassName","showValidate","validation","required","minLength","maxLength","email","password","minCountLetters","minCountUpperCase","minCountLowerCase","minCountDigits","passwordSymbols","repassword","equalTo","onBlur","controlName","control","setState","onChangeHandler","event","target","validateControlInfo","validateControl","isValid","validator","isEmpty","checkEmail","checkMinLength","checkMaxLength","checkPasswordSymbols","checkMinCountUpperCase","checkMinCountLowerCase","checkMinCountDigits","onlyLatin","renderInputs","inputs","Object","keys","map","index","e","handleSubmit","preventDefault","forEach","post","apiServer","headers","then","res","window","location","href","catch","error","response","data","alert","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport Input from \"../../utils/UI/Input/Input\"\nimport Validation from \"../../utils/Validation/Validation\";\nimport {CONFIG} from \"../../config\";\nimport axios from \"axios\";\n\nclass SingIn extends React.Component {\n\n    state = {\n\n        formControls: {\n            name: {\n                type: 'text',\n                placeholder: 'Name',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid name',\n                iconClassName: 'fas fa-user',\n                showValidate: false,\n                validation: {\n                    required: true,\n                    minLength: 3,\n                    maxLength: 60\n                }\n            },\n            email: {\n                type: 'email',\n                placeholder: 'Email',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid email',\n                iconClassName: 'fas fa-envelope',\n                showValidate: false,\n                validation: {\n                    required: true,\n                    email: true\n                }\n            },\n            password: {\n                type: 'password',\n                placeholder: 'Password',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid password',\n                iconClassName: 'fas fa-lock',\n                showValidate: false,\n                validation: {\n                    required: true,\n                    minLength: 8,\n                    maxLength: 30,\n                    minCountLetters: 1,\n                    minCountUpperCase: 1,\n                    minCountLowerCase: 1,\n                    minCountDigits: 1,\n                    passwordSymbols: true,\n                }\n            },\n            repassword: {\n                type: 'password',\n                placeholder: 'Re-password',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid repassword',\n                iconClassName: 'fas fa-lock',\n                showValidate: false,\n                validation: {\n                    required: true,\n                    equalTo: 'password'\n                }\n            }\n        },\n    }\n\n    onBlur = (controlName) => {\n        const formControls = {...this.state.formControls};\n        const control = {...formControls[controlName]};\n        control.showValidate = true;\n        formControls[controlName] = control;\n\n        this.setState({\n            formControls\n        });\n    }\n\n    onChangeHandler = (event, controlName) => {\n        const formControls = {...this.state.formControls};\n        const control = {...formControls[controlName]};\n\n        control.value = (event.target).value;\n        let validateControlInfo = this.validateControl(control.value, control.validation);\n\n        control.valid = validateControlInfo.isValid;\n        if (validateControlInfo.errorMessage !== '') {\n            control.errorMessage = validateControlInfo.errorMessage;\n        }\n\n        formControls[controlName] = control;\n\n        this.setState({\n            formControls\n        });\n    };\n\n    validateControl = (value, validation) => {\n        if (!validation) {\n            return {isValid: true, errorMessage: ''};\n        }\n\n        let validator = new Validation();\n\n        let isValid = true;\n        let errorMessage = '';\n\n        if (validation.required && isValid) {\n            isValid = !validator.isEmpty(value);\n            if (!isValid) errorMessage = 'Field is required.';\n        }\n\n        if (validation.email && isValid) {\n            isValid = validator.checkEmail(value);\n            if (!isValid) errorMessage = 'Invalid email.';\n        }\n\n        if (validation.minLength && isValid) {\n            isValid = validator.checkMinLength(value, validation.minLength);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minLength + ' chars.';\n        }\n\n        if (validation.maxLength && isValid) {\n            isValid = validator.checkMaxLength(value, validation.maxLength);\n            if (!isValid) errorMessage = 'You can put maximum ' + validation.maxLength + ' chars.';\n        }\n\n        if (validation.equalTo && isValid) {\n            isValid = (value === this.state.formControls[validation.equalTo].value);\n            if (!isValid) errorMessage = 'Passwords should be equal.';\n        }\n\n        if (validation.minCountLetters && isValid) {\n            isValid = validator.checkPasswordSymbols(value);\n            if (!isValid) errorMessage = 'You can use only latin letters, numbers and symbols(!,#,$,%,&,*,+,?,@,^)';\n        }\n\n        if (validation.minCountUpperCase && isValid) {\n            isValid = validator.checkMinCountUpperCase(value, validation.minCountUpperCase);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountUpperCase + ' letter(s) in upper case.';\n        }\n\n        if (validation.minCountLowerCase && isValid) {\n            isValid = validator.checkMinCountLowerCase(value, validation.minCountLowerCase);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountLowerCase + ' letter(s) in lower case.';\n        }\n\n        if (validation.minCountDigits && isValid) {\n            isValid = validator.checkMinCountDigits(value, validation.minCountDigits);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountDigits + ' digit(s).';\n        }\n\n        if (validation.onlyLatin && isValid) {\n            isValid = (value === this.state.formControls[validation.equalTo].value);\n            if (!isValid) errorMessage = 'Passwords should be equal.';\n        }\n\n        return {isValid: isValid, errorMessage: errorMessage};\n    };\n\n\n    renderInputs = () => {\n        const inputs = Object.keys(this.state.formControls).map((controlName, index) => {\n            const control = this.state.formControls[controlName];\n            return (\n                <Input\n                    key={controlName + index}\n                    type={control.type}\n                    placeholder={control.placeholder}\n                    valid={control.valid}\n                    iconClassName={control.iconClassName}\n                    showValidate={control.showValidate}\n                    onChange={(e) => this.onChangeHandler(e, controlName)}\n                    errorMessage={control.errorMessage}\n                    onBlur={() => this.onBlur(controlName)}\n                    value={control.value}\n                />\n            );\n        });\n\n        return inputs;\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        let isValid = true;\n        const formControls = {...this.state.formControls};\n\n        Object.keys(formControls).forEach((controlName) => {\n\n            let control = {...formControls[controlName]};\n\n            control.showValidate = true;\n            formControls[controlName] = control;\n\n            if (!control.valid && isValid) {\n                isValid = false;\n            }\n        });\n\n        if (isValid) {\n            axios.post(CONFIG.apiServer + \"api/register\", {\n                name: formControls.name.value,\n                email: formControls.email.value,\n                password: formControls.password.value,\n            }, {\n                headers: {\n                    'Accept': 'application/json'\n                }\n            }).then((res) => {\n                window.location.href = \"/signin\";\n            }).catch((error) => {\n                if (error.response.data.data.email === \"Email already exists.\") {\n                    let control = formControls.email;\n                    control.valid = false;\n                    control.showValidate = true;\n                    control.errorMessage = 'User with the same email already exists.';\n                    formControls.email = control;\n                    this.setState({\n                        formControls\n                    });\n                } else {\n                    alert(\"Unknown error\");\n                }\n            });\n        } else {\n            this.setState({\n                formControls\n            });\n        }\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <h1>Sign Up</h1>\n                <form onSubmit={this.handleSubmit}>\n                    {this.renderInputs()}\n                    <div className=\"sign-button-wrapper\">\n                        <button type=\"submit\" className=\"btn default-btn\">Create</button>\n                    </div>\n                    <div className=\"other-type-sign\">\n                        <h3>Have account already?</h3>\n                        <Link to={'/signin'}>Sign In</Link>\n                    </div>\n                </form>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default SingIn;\n"]},"metadata":{},"sourceType":"module"}