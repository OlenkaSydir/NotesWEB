{"ast":null,"code":"var _jsxFileName = \"/Users/osydir/Documents/LPNU/WEB/notes/src/components/Sign/SignIn.js\";\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport Input from \"../../utils/UI/Input/Input\";\nimport Validation from \"../../utils/Validation/Validation\";\nimport { CONFIG } from \"../../config\";\nimport axios from \"axios\";\nimport Auth from \"../../utils/Auth/Auth\";\n\nclass SingIn extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formControls: {\n        email: {\n          type: 'email',\n          placeholder: 'Email',\n          value: '',\n          valid: false,\n          errorMessage: 'Enter valid email',\n          iconClassName: 'fas fa-envelope',\n          showValidate: false,\n          validation: {\n            required: true,\n            email: true\n          }\n        },\n        password: {\n          type: 'password',\n          placeholder: 'Password',\n          value: '',\n          valid: false,\n          errorMessage: 'Enter valid password',\n          iconClassName: 'fas fa-lock',\n          showValidate: false,\n          validation: {\n            required: true\n          }\n        }\n      },\n      remember: false\n    };\n\n    this.onBlur = controlName => {\n      const formControls = { ...this.state.formControls\n      };\n      const control = { ...formControls[controlName]\n      };\n      control.showValidate = true;\n\n      if (this.state.formControls.email.errorMessage === 'Invalid email or password.') {\n        formControls.email.valid = true;\n      }\n\n      formControls[controlName] = control;\n      this.setState({\n        formControls\n      });\n    };\n\n    this.onChangeHandler = (event, controlName) => {\n      const formControls = { ...this.state.formControls\n      };\n      const control = { ...formControls[controlName]\n      };\n      control.value = event.target.value;\n      let validateControlInfo = this.validateControl(control.value, control.validation);\n      control.valid = validateControlInfo.isValid;\n\n      if (validateControlInfo.errorMessage !== '') {\n        control.errorMessage = validateControlInfo.errorMessage;\n      }\n\n      formControls[controlName] = control;\n      this.setState({\n        formControls\n      });\n    };\n\n    this.validateControl = (value, validation) => {\n      if (!validation) {\n        return {\n          isValid: true,\n          errorMessage: ''\n        };\n      }\n\n      let validator = new Validation();\n      let isValid = true;\n      let errorMessage = '';\n\n      if (validation.required && isValid) {\n        isValid = !validator.isEmpty(value);\n        if (!isValid) errorMessage = 'Field is required.';\n      }\n\n      if (validation.email && isValid) {\n        isValid = validator.checkEmail(value);\n        if (!isValid) errorMessage = 'Invalid email.';\n      }\n\n      if (validation.minLength && isValid) {\n        isValid = validator.checkMinLength(value, validation.minLength);\n        if (!isValid) errorMessage = 'You should put minimum ' + validation.minLength + ' chars.';\n      }\n\n      if (validation.maxLength && isValid) {\n        isValid = validator.checkMaxLength(value, validation.maxLength);\n        if (!isValid) errorMessage = 'You can put maximum ' + validation.maxLength + ' chars.';\n      }\n\n      if (validation.equalTo && isValid) {\n        isValid = value === this.state.formControls[validation.equalTo].value;\n        if (!isValid) errorMessage = 'Passwords should be equal.';\n      }\n\n      if (validation.minCountLetters && isValid) {\n        isValid = validator.checkPasswordSymbols(value);\n        if (!isValid) errorMessage = 'You can use only latin letters, numbers and symbols(!,#,$,%,&,*,+,?,@,^)';\n      }\n\n      if (validation.minCountUpperCase && isValid) {\n        isValid = validator.checkMinCountUpperCase(value, validation.minCountUpperCase);\n        if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountUpperCase + ' letter(s) in upper case.';\n      }\n\n      if (validation.minCountLowerCase && isValid) {\n        isValid = validator.checkMinCountLowerCase(value, validation.minCountLowerCase);\n        if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountLowerCase + ' letter(s) in lower case.';\n      }\n\n      if (validation.minCountDigits && isValid) {\n        isValid = validator.checkMinCountDigits(value, validation.minCountDigits);\n        if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountDigits + ' digit(s).';\n      }\n\n      if (validation.onlyLatin && isValid) {\n        isValid = value === this.state.formControls[validation.equalTo].value;\n        if (!isValid) errorMessage = 'Passwords should be equal.';\n      }\n\n      return {\n        isValid: isValid,\n        errorMessage: errorMessage\n      };\n    };\n\n    this.renderInputs = () => {\n      const inputs = Object.keys(this.state.formControls).map((controlName, index) => {\n        const control = this.state.formControls[controlName];\n        return /*#__PURE__*/React.createElement(Input, {\n          key: controlName + index,\n          type: control.type,\n          placeholder: control.placeholder,\n          valid: control.valid,\n          iconClassName: control.iconClassName,\n          showValidate: control.showValidate,\n          onChange: e => this.onChangeHandler(e, controlName),\n          errorMessage: control.errorMessage,\n          onBlur: () => this.onBlur(controlName),\n          value: control.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }\n        });\n      });\n      return inputs;\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      let isValid = true;\n      const formControls = { ...this.state.formControls\n      };\n      Object.keys(formControls).forEach(controlName => {\n        let control = { ...formControls[controlName]\n        };\n        control.showValidate = true;\n        formControls[controlName] = control;\n\n        if (!control.valid && isValid) {\n          isValid = false;\n        }\n      });\n\n      if (isValid) {\n        axios.post(CONFIG.apiServer + \"oauth/token\", {\n          client_id: 11,\n          client_secret: '2UD9eZtGyZi100m6JbDsmz4noHkgHss36m9cUgB8',\n          grant_type: 'password',\n          username: formControls.email.value,\n          password: formControls.password.value\n        }, {\n          headers: {\n            'Accept': 'application/json'\n          }\n        }).then(res => {\n          if (res.status === 200) {\n            Auth.signIn(res.data.access_token);\n          }\n        }).catch(error => {\n          let control = formControls.email;\n          control.valid = false;\n          control.showValidate = true;\n          control.errorMessage = 'Invalid email or password.';\n          formControls.email = control;\n          this.setState({\n            formControls\n          });\n        });\n      } else {\n        this.setState({\n          formControls\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }\n    }, \"Sign In\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }, this.renderInputs(), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sign-button-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn default-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 25\n      }\n    }, \"Sign In\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"other-type-sign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 25\n      }\n    }, \"Have not account yet?\"), /*#__PURE__*/React.createElement(Link, {\n      to: '/signup',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 25\n      }\n    }, \"Sign Up\"))));\n  }\n\n}\n\nexport default SingIn;","map":{"version":3,"sources":["/Users/osydir/Documents/LPNU/WEB/notes/src/components/Sign/SignIn.js"],"names":["React","Link","Input","Validation","CONFIG","axios","Auth","SingIn","Component","state","formControls","email","type","placeholder","value","valid","errorMessage","iconClassName","showValidate","validation","required","password","remember","onBlur","controlName","control","setState","onChangeHandler","event","target","validateControlInfo","validateControl","isValid","validator","isEmpty","checkEmail","minLength","checkMinLength","maxLength","checkMaxLength","equalTo","minCountLetters","checkPasswordSymbols","minCountUpperCase","checkMinCountUpperCase","minCountLowerCase","checkMinCountLowerCase","minCountDigits","checkMinCountDigits","onlyLatin","renderInputs","inputs","Object","keys","map","index","e","handleSubmit","preventDefault","forEach","post","apiServer","client_id","client_secret","grant_type","username","headers","then","res","status","signIn","data","access_token","catch","error","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport Input from \"../../utils/UI/Input/Input\"\nimport Validation from \"../../utils/Validation/Validation\";\nimport {CONFIG} from \"../../config\";\nimport axios from \"axios\";\nimport Auth from \"../../utils/Auth/Auth\";\n\nclass SingIn extends React.Component {\n\n    state = {\n        formControls: {\n            email: {\n                type: 'email',\n                placeholder: 'Email',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid email',\n                iconClassName: 'fas fa-envelope',\n                showValidate: false,\n                validation: {\n                    required: true,\n                    email: true\n                }\n            },\n            password: {\n                type: 'password',\n                placeholder: 'Password',\n                value: '',\n                valid: false,\n                errorMessage: 'Enter valid password',\n                iconClassName: 'fas fa-lock',\n                showValidate: false,\n                validation: {\n                    required: true,\n                }\n            }\n        },\n        remember: false\n    };\n\n    onBlur = (controlName) => {\n        const formControls = {...this.state.formControls};\n        const control = {...formControls[controlName]};\n        control.showValidate = true;\n\n        if (this.state.formControls.email.errorMessage === 'Invalid email or password.') {\n            formControls.email.valid = true;\n        }\n\n        formControls[controlName] = control;\n\n        this.setState({\n            formControls\n        });\n    }\n\n    onChangeHandler = (event, controlName) => {\n        const formControls = {...this.state.formControls};\n        const control = {...formControls[controlName]};\n\n        control.value = (event.target).value;\n        let validateControlInfo = this.validateControl(control.value, control.validation);\n\n        control.valid = validateControlInfo.isValid;\n        if (validateControlInfo.errorMessage !== '') {\n            control.errorMessage = validateControlInfo.errorMessage;\n        }\n\n        formControls[controlName] = control;\n\n        this.setState({\n            formControls\n        });\n    };\n\n    validateControl = (value, validation) => {\n        if (!validation) {\n            return {isValid: true, errorMessage: ''};\n        }\n\n        let validator = new Validation();\n\n        let isValid = true;\n        let errorMessage = '';\n\n        if (validation.required && isValid) {\n            isValid = !validator.isEmpty(value);\n            if (!isValid) errorMessage = 'Field is required.';\n        }\n\n        if (validation.email && isValid) {\n            isValid = validator.checkEmail(value);\n            if (!isValid) errorMessage = 'Invalid email.';\n        }\n\n        if (validation.minLength && isValid) {\n            isValid = validator.checkMinLength(value, validation.minLength);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minLength + ' chars.';\n        }\n\n        if (validation.maxLength && isValid) {\n            isValid = validator.checkMaxLength(value, validation.maxLength);\n            if (!isValid) errorMessage = 'You can put maximum ' + validation.maxLength + ' chars.';\n        }\n\n        if (validation.equalTo && isValid) {\n            isValid = (value === this.state.formControls[validation.equalTo].value);\n            if (!isValid) errorMessage = 'Passwords should be equal.';\n        }\n\n        if (validation.minCountLetters && isValid) {\n            isValid = validator.checkPasswordSymbols(value);\n            if (!isValid) errorMessage = 'You can use only latin letters, numbers and symbols(!,#,$,%,&,*,+,?,@,^)';\n        }\n\n        if (validation.minCountUpperCase && isValid) {\n            isValid = validator.checkMinCountUpperCase(value, validation.minCountUpperCase);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountUpperCase + ' letter(s) in upper case.';\n        }\n\n        if (validation.minCountLowerCase && isValid) {\n            isValid = validator.checkMinCountLowerCase(value, validation.minCountLowerCase);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountLowerCase + ' letter(s) in lower case.';\n        }\n\n        if (validation.minCountDigits && isValid) {\n            isValid = validator.checkMinCountDigits(value, validation.minCountDigits);\n            if (!isValid) errorMessage = 'You should put minimum ' + validation.minCountDigits + ' digit(s).';\n        }\n\n        if (validation.onlyLatin && isValid) {\n            isValid = (value === this.state.formControls[validation.equalTo].value);\n            if (!isValid) errorMessage = 'Passwords should be equal.';\n        }\n\n        return {isValid: isValid, errorMessage: errorMessage};\n    };\n\n    renderInputs = () => {\n        const inputs = Object.keys(this.state.formControls).map((controlName, index) => {\n            const control = this.state.formControls[controlName];\n            return (\n                <Input\n                    key={controlName + index}\n                    type={control.type}\n                    placeholder={control.placeholder}\n                    valid={control.valid}\n                    iconClassName={control.iconClassName}\n                    showValidate={control.showValidate}\n                    onChange={(e) => this.onChangeHandler(e, controlName)}\n                    errorMessage={control.errorMessage}\n                    onBlur={() => this.onBlur(controlName)}\n                    value={control.value}\n                />\n            );\n        });\n\n        return inputs;\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        let isValid = true;\n        const formControls = {...this.state.formControls};\n\n        Object.keys(formControls).forEach((controlName) => {\n\n            let control = {...formControls[controlName]};\n\n            control.showValidate = true;\n            formControls[controlName] = control;\n\n            if (!control.valid && isValid) {\n                isValid = false;\n            }\n        });\n\n        if (isValid) {\n            axios.post(CONFIG.apiServer + \"oauth/token\", {\n                client_id: 11,\n                client_secret: '2UD9eZtGyZi100m6JbDsmz4noHkgHss36m9cUgB8',\n                grant_type: 'password',\n                username: formControls.email.value,\n                password: formControls.password.value,\n            },{\n                headers: {\n                    'Accept': 'application/json',\n                }\n            }).then((res) => {\n                if (res.status === 200) {\n                    Auth.signIn(res.data.access_token);\n                }\n            }).catch((error) => {\n                let control = formControls.email;\n                control.valid = false;\n                control.showValidate = true;\n                control.errorMessage = 'Invalid email or password.';\n                formControls.email = control;\n                this.setState({\n                    formControls\n                });\n            });\n        } else {\n            this.setState({\n                formControls\n            });\n        }\n    };\n\n    render () {\n        return (\n            <React.Fragment>\n                <h1>Sign In</h1>\n                <form onSubmit={this.handleSubmit}>\n                    {this.renderInputs()}\n                    <div className=\"sign-button-wrapper\">\n                        <button type=\"submit\" className=\"btn default-btn\">Sign In</button>\n                    </div>\n                    <div className=\"other-type-sign\">\n                        <h3>Have not account yet?</h3>\n                        <Link to={'/signup'}>Sign Up</Link>\n                    </div>\n                </form>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default SingIn;\n"]},"metadata":{},"sourceType":"module"}