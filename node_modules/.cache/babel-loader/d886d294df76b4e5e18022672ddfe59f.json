{"ast":null,"code":"var _jsxFileName = \"/Users/osydir/Documents/LPNU/WEB/notes/src/components/ManageNote/ManageNote.js\";\nimport React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport './ManageNote.scss';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport axios from \"axios\";\nimport { CONFIG } from \"../../config\";\nimport Auth from \"../../utils/Auth/Auth\";\n\nclass ManageNote extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formControls: {\n        title: {\n          value: '',\n          isValid: false,\n          isBlur: false,\n          errorMessage: 'This field is required.'\n        },\n        text: {\n          value: '',\n          isValid: false,\n          isBlur: false,\n          errorMessage: 'This field is required.'\n        }\n      }\n    };\n\n    this.inputOnChangeHandler = (e, controlName) => {\n      const formControls = { ...this.state.formControls\n      };\n      formControls[controlName].value = e.target.value;\n\n      if (formControls[controlName].value.length === 0) {\n        formControls[controlName].errorMessage = 'This field is required.';\n        formControls[controlName].isValid = false;\n      } else {\n        formControls[controlName].errorMessage = '';\n        formControls[controlName].isValid = true;\n      }\n\n      this.setState(formControls);\n    };\n\n    this.inputOnBlurHandler = controlName => {\n      const formControls = { ...this.state.formControls\n      };\n      formControls[controlName].isBlur = true;\n      this.setState(formControls);\n    };\n\n    this.isFormValid = () => {\n      for (const controlName in this.state.formControls) {\n        if (!this.state.formControls[controlName].isValid) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.saveNote = () => {\n      if (this.isFormValid()) {\n        if (this.props.editMode) {\n          axios.put(CONFIG.apiServer + \"api/notes/\" + this.props.note.id, {\n            title: this.state.formControls.title.value,\n            text: this.state.formControls.text.value\n          }, {\n            headers: {\n              'Accept': 'application/json',\n              'Authorization': 'Bearer ' + Auth.loggedApiKey\n            }\n          }).then(res => {\n            this.props.onChangeNote(res.data.data);\n            this.props.onClosePopup();\n          }).catch(() => {\n            alert('Unknown error. Please reload page and try it one more time.');\n          });\n        } else {\n          axios.post(CONFIG.apiServer + \"api/notes\", {\n            title: this.state.formControls.title.value,\n            text: this.state.formControls.text.value\n          }, {\n            headers: {\n              'Accept': 'application/json',\n              'Authorization': 'Bearer ' + Auth.loggedApiKey\n            }\n          }).then(res => {\n            this.props.onChangeNote(res.data.data);\n            this.props.onClosePopup();\n          }).catch(() => {\n            alert('Unknown error. Please reload page and try it one more time.');\n          });\n        }\n      }\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    const formControls = { ...this.state.formControls\n    };\n    formControls.title.value = props.editMode ? props.note.title : '';\n    formControls.title.isValid = props.editMode;\n    formControls.text.value = props.editMode ? props.note.text : '';\n    formControls.text.isValid = props.editMode;\n    this.setState(formControls);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Modal, {\n      animation: false,\n      size: \"lg\",\n      show: this.props.isOpened,\n      onHide: this.props.onClosePopup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, this.props.editMode ? 'Edit note' : 'New note')), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"block-title form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"text\",\n      value: this.state.formControls.title.value,\n      onChange: e => {\n        this.inputOnChangeHandler(e, 'title');\n      },\n      onBlur: e => {\n        this.inputOnBlurHandler('title');\n      },\n      placeholder: \"Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"small\", {\n      className: \"error-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }\n    }, this.state.formControls.title.isBlur && !this.state.formControls.title.isValid ? this.state.formControls.title.errorMessage : '')), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"note-text form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      className: \"form-control\",\n      value: this.state.formControls.text.value,\n      onChange: e => {\n        this.inputOnChangeHandler(e, 'text');\n      },\n      onBlur: e => {\n        this.inputOnBlurHandler('text');\n      },\n      placeholder: \"Text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"small\", {\n      className: \"error-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }\n    }, this.state.formControls.text.isBlur && !this.state.formControls.text.isValid ? this.state.formControls.text.errorMessage : ''))), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"option-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"save-btn option-button\",\n      onClick: this.saveNote,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: \"check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 92\n      }\n    }), \" Save\"))));\n  }\n\n}\n\nexport default ManageNote;","map":{"version":3,"sources":["/Users/osydir/Documents/LPNU/WEB/notes/src/components/ManageNote/ManageNote.js"],"names":["React","Modal","FontAwesomeIcon","axios","CONFIG","Auth","ManageNote","Component","state","formControls","title","value","isValid","isBlur","errorMessage","text","inputOnChangeHandler","e","controlName","target","length","setState","inputOnBlurHandler","isFormValid","saveNote","props","editMode","put","apiServer","note","id","headers","loggedApiKey","then","res","onChangeNote","data","onClosePopup","catch","alert","post","componentWillReceiveProps","render","isOpened"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport './ManageNote.scss';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport axios from \"axios\";\nimport {CONFIG} from \"../../config\";\nimport Auth from \"../../utils/Auth/Auth\";\n\nclass ManageNote extends React.Component {\n\n    state = {\n        formControls: {\n            title: {\n                value: '',\n                isValid: false,\n                isBlur: false,\n                errorMessage: 'This field is required.'\n            },\n            text: {\n                value: '',\n                isValid: false,\n                isBlur: false,\n                errorMessage: 'This field is required.'\n            }\n        }\n    }\n\n    componentWillReceiveProps(props) {\n        const formControls = {...this.state.formControls};\n        formControls.title.value = props.editMode ? props.note.title : '';\n        formControls.title.isValid = props.editMode;\n        formControls.text.value = props.editMode ? props.note.text : '';\n        formControls.text.isValid = props.editMode;\n        this.setState(formControls);\n    }\n\n    inputOnChangeHandler = (e, controlName) => {\n        const formControls = {...this.state.formControls};\n        formControls[controlName].value = e.target.value;\n\n        if (formControls[controlName].value.length === 0) {\n            formControls[controlName].errorMessage = 'This field is required.';\n            formControls[controlName].isValid = false;\n        } else {\n            formControls[controlName].errorMessage = '';\n            formControls[controlName].isValid = true;\n        }\n\n        this.setState(formControls);\n    }\n\n    inputOnBlurHandler = (controlName) => {\n        const formControls = {...this.state.formControls};\n        formControls[controlName].isBlur = true;\n        this.setState(formControls);\n    }\n\n    isFormValid = () => {\n        for (const controlName in this.state.formControls) {\n            if (!this.state.formControls[controlName].isValid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    saveNote = () => {\n        if (this.isFormValid()) {\n            if (this.props.editMode) {\n                axios.put(CONFIG.apiServer + \"api/notes/\" + this.props.note.id, {\n                    title: this.state.formControls.title.value,\n                    text: this.state.formControls.text.value\n                }, {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + Auth.loggedApiKey\n                    }\n                }).then((res) => {\n                    this.props.onChangeNote(res.data.data);\n                    this.props.onClosePopup();\n                }).catch(() => {\n                    alert('Unknown error. Please reload page and try it one more time.');\n                });\n            } else {\n                axios.post(CONFIG.apiServer + \"api/notes\", {\n                    title: this.state.formControls.title.value,\n                    text: this.state.formControls.text.value\n                }, {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Authorization': 'Bearer ' + Auth.loggedApiKey\n                    }\n                }).then((res) => {\n                    this.props.onChangeNote(res.data.data);\n                    this.props.onClosePopup();\n                }).catch(() => {\n                    alert('Unknown error. Please reload page and try it one more time.');\n                });\n            }\n        }\n    }\n\n    render() {\n        return (\n            <Modal animation={false} size=\"lg\" show={this.props.isOpened} onHide={this.props.onClosePopup}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{this.props.editMode ? 'Edit note' : 'New note'}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"block-title form-group\">\n                        <input className=\"form-control\" type=\"text\" value={this.state.formControls.title.value}\n                               onChange={(e) => {this.inputOnChangeHandler(e, 'title')}}\n                               onBlur={(e) => {this.inputOnBlurHandler('title')}}\n                               placeholder=\"Title\"/>\n                        <small className=\"error-message\">{this.state.formControls.title.isBlur && !this.state.formControls.title.isValid  ? this.state.formControls.title.errorMessage : ''}</small>\n                    </div>\n                    <div className=\"note-text form-group\">\n                        <textarea className=\"form-control\" value={this.state.formControls.text.value}\n                                  onChange={(e) => {this.inputOnChangeHandler(e, 'text')}}\n                                  onBlur={(e) => {this.inputOnBlurHandler('text')}}\n                                  placeholder=\"Text\"/>\n                        <small className=\"error-message\">{this.state.formControls.text.isBlur && !this.state.formControls.text.isValid  ? this.state.formControls.text.errorMessage : ''}</small>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <div className=\"option-buttons\">\n                        <button className=\"save-btn option-button\" onClick={this.saveNote}><FontAwesomeIcon\n                            icon=\"check\"/> Save\n                        </button>\n                    </div>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default ManageNote;\n"]},"metadata":{},"sourceType":"module"}