{"ast":null,"code":"class Validation {\n  constructor() {\n    this.checkEmail = email => {\n      // eslint-disable-next-line\n      let validEmailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return validEmailRegex.test(email);\n    };\n\n    this.isEmpty = str => {\n      return str.trim() === '';\n    };\n\n    this.checkMaxLength = (str, max) => {\n      return str.length <= max;\n    };\n\n    this.checkMinLength = (str, min) => {\n      return str.length >= min;\n    };\n\n    this.checkPasswordSymbols = str => {\n      let regex = /^[\\w!#$%&*+?@^]+$/;\n      return regex.test(str);\n    };\n\n    this.checkMinCountUpperCase = (str, minCount) => {\n      let regex = new RegExp('[A-Z]{' + minCount + ',}');\n      return regex.test(str);\n    };\n\n    this.checkMinCountLowerCase = (str, minCount) => {\n      let regex = new RegExp('[a-z]{' + minCount + ',}');\n      return regex.test(str);\n    };\n\n    this.checkMinCountDigits = (str, minCount) => {\n      let regex = new RegExp('\\\\d{' + minCount + ',}');\n      return regex.test(str);\n    };\n\n    this.checkMinNumber = (number, min) => {\n      if (number < min) return false;\n      return true;\n    };\n\n    this.checkMaxNumber = (number, max) => {\n      if (number > max) return false;\n      return true;\n    };\n  }\n\n}\n\nexport default Validation;","map":{"version":3,"sources":["/Users/osydir/Documents/LPNU/WEB/notes/src/utils/Validation/Validation.js"],"names":["Validation","checkEmail","email","validEmailRegex","test","isEmpty","str","trim","checkMaxLength","max","length","checkMinLength","min","checkPasswordSymbols","regex","checkMinCountUpperCase","minCount","RegExp","checkMinCountLowerCase","checkMinCountDigits","checkMinNumber","number","checkMaxNumber"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AAAA;AAAA,SACbC,UADa,GACCC,KAAD,IAAW;AACpB;AACA,UAAIC,eAAe,GAAG,2JAAtB;AACA,aAAOA,eAAe,CAACC,IAAhB,CAAqBF,KAArB,CAAP;AACH,KALY;;AAAA,SAObG,OAPa,GAOFC,GAAD,IAAS;AACf,aAAOA,GAAG,CAACC,IAAJ,OAAe,EAAtB;AACH,KATY;;AAAA,SAWbC,cAXa,GAWI,CAACF,GAAD,EAAMG,GAAN,KAAc;AAC3B,aAAOH,GAAG,CAACI,MAAJ,IAAcD,GAArB;AACH,KAbY;;AAAA,SAebE,cAfa,GAeI,CAACL,GAAD,EAAMM,GAAN,KAAc;AAC3B,aAAON,GAAG,CAACI,MAAJ,IAAcE,GAArB;AACH,KAjBY;;AAAA,SAmBbC,oBAnBa,GAmBWP,GAAD,IAAS;AAC5B,UAAIQ,KAAK,GAAG,mBAAZ;AACA,aAAOA,KAAK,CAACV,IAAN,CAAWE,GAAX,CAAP;AACH,KAtBY;;AAAA,SAwBbS,sBAxBa,GAwBY,CAACT,GAAD,EAAMU,QAAN,KAAmB;AACxC,UAAIF,KAAK,GAAG,IAAIG,MAAJ,CAAW,WAAWD,QAAX,GAAsB,IAAjC,CAAZ;AACA,aAAOF,KAAK,CAACV,IAAN,CAAWE,GAAX,CAAP;AACH,KA3BY;;AAAA,SA6BbY,sBA7Ba,GA6BY,CAACZ,GAAD,EAAMU,QAAN,KAAmB;AACxC,UAAIF,KAAK,GAAG,IAAIG,MAAJ,CAAW,WAAWD,QAAX,GAAsB,IAAjC,CAAZ;AACA,aAAOF,KAAK,CAACV,IAAN,CAAWE,GAAX,CAAP;AACH,KAhCY;;AAAA,SAkCba,mBAlCa,GAkCS,CAACb,GAAD,EAAMU,QAAN,KAAmB;AACrC,UAAIF,KAAK,GAAG,IAAIG,MAAJ,CAAW,SAASD,QAAT,GAAoB,IAA/B,CAAZ;AACA,aAAOF,KAAK,CAACV,IAAN,CAAWE,GAAX,CAAP;AACH,KArCY;;AAAA,SAuCbc,cAvCa,GAuCI,CAACC,MAAD,EAAST,GAAT,KAAiB;AAC9B,UAAIS,MAAM,GAAGT,GAAb,EACI,OAAO,KAAP;AACJ,aAAO,IAAP;AACH,KA3CY;;AAAA,SA6CbU,cA7Ca,GA6CI,CAACD,MAAD,EAASZ,GAAT,KAAiB;AAC9B,UAAIY,MAAM,GAAGZ,GAAb,EACI,OAAO,KAAP;AACJ,aAAO,IAAP;AACH,KAjDY;AAAA;;AAAA;;AAoDjB,eAAeT,UAAf","sourcesContent":["class Validation {\n    checkEmail = (email) => {\n        // eslint-disable-next-line\n        let validEmailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return validEmailRegex.test(email);\n    };\n\n    isEmpty = (str) => {\n        return str.trim() === '';\n    };\n\n    checkMaxLength = (str, max) => {\n        return str.length <= max;\n    };\n\n    checkMinLength = (str, min) => {\n        return str.length >= min;\n    };\n\n    checkPasswordSymbols = (str) => {\n        let regex = /^[\\w!#$%&*+?@^]+$/;\n        return regex.test(str);\n    };\n\n    checkMinCountUpperCase = (str, minCount) => {\n        let regex = new RegExp('[A-Z]{' + minCount + ',}');\n        return regex.test(str);\n    };\n\n    checkMinCountLowerCase = (str, minCount) => {\n        let regex = new RegExp('[a-z]{' + minCount + ',}');\n        return regex.test(str);\n    };\n\n    checkMinCountDigits = (str, minCount) => {\n        let regex = new RegExp('\\\\d{' + minCount + ',}');\n        return regex.test(str);\n    };\n\n    checkMinNumber = (number, min) => {\n        if (number < min)\n            return false;\n        return true;\n    };\n\n    checkMaxNumber = (number, max) => {\n        if (number > max)\n            return false;\n        return true;\n    };\n}\n\nexport default Validation;\n"]},"metadata":{},"sourceType":"module"}